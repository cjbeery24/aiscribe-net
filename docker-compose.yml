version: "3.8"

services:
  # Sermon Transcription API
  sermon-transcription-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sermon-transcription-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=SermonTranscriptionDb_Dev;Username=postgres;Password=dev_password
      - Redis__ConnectionString=redis:6379
      - JwtSettings__SecretKey=your-super-secret-jwt-key-for-development-that-is-at-least-32-characters-long
      - JwtSettings__Issuer=SermonTranscription.Api
      - JwtSettings__Audience=SermonTranscription.WebApp
      - JwtSettings__ExpirationInMinutes=60
      - Serilog__MinimumLevel__Default=Information
    ports:
      - "5000:8080"
    networks:
      - sermon-transcription-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --no-verbose --tries=1 --spider http://localhost:8080/health || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      # Mount logs directory for persistent logging
      - ./logs:/app/logs

  postgres:
    image: postgres:15-alpine
    container_name: sermon-transcription-postgres
    environment:
      POSTGRES_DB: SermonTranscriptionDb_Dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: dev_password
      PGDATA: /data/postgres
    volumes:
      - postgres_data:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - sermon-transcription-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: sermon-transcription-redis
    ports:
      - "6379:6379"
    networks:
      - sermon-transcription-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Optional: PgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: sermon-transcription-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: "False"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - sermon-transcription-network
    restart: unless-stopped
    depends_on:
      - postgres

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  sermon-transcription-network:
    driver: bridge
