version: "3.8"

# Production configuration
services:
  sermon-transcription-api:
    build:
      context: .
      dockerfile: Dockerfile
      # Production build arguments
      args:
        - ASPNETCORE_ENVIRONMENT=Production
    container_name: sermon-transcription-api-prod
    environment:
      # Production environment variables (use secrets management in real deployment)
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__DefaultConnection=${DATABASE_CONNECTION_STRING}
      - Redis__ConnectionString=${REDIS_CONNECTION_STRING}
      - JwtSettings__SecretKey=${JWT_SECRET_KEY}
      - JwtSettings__Issuer=${JWT_ISSUER}
      - JwtSettings__Audience=${JWT_AUDIENCE}
      - JwtSettings__ExpirationInMinutes=${JWT_EXPIRATION_MINUTES:-15}
      - Serilog__MinimumLevel__Default=Information
      - Serilog__MinimumLevel__Override__Microsoft=Warning
      - Serilog__MinimumLevel__Override__System=Warning
    ports:
      - "${API_PORT:-5000}:8080"
    networks:
      - sermon-transcription-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --no-verbose --tries=1 --spider http://localhost:8080/health || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      # Production logs
      - sermon-logs:/app/logs
    # Resource limits for production
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 512M
        reservations:
          cpus: "0.5"
          memory: 256M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  postgres:
    image: postgres:15-alpine
    container_name: sermon-transcription-postgres-prod
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/data/postgres
    volumes:
      - postgres_data_prod:/data/postgres
    networks:
      - sermon-transcription-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    # Security: Don't expose postgres port to host in production
    # ports:
    #   - "5432:5432"
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 1G
        reservations:
          cpus: "0.5"
          memory: 512M

  redis:
    image: redis:7-alpine
    container_name: sermon-transcription-redis-prod
    networks:
      - sermon-transcription-network
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data_prod:/data
    healthcheck:
      test:
        [
          "CMD",
          "redis-cli",
          "--no-auth-warning",
          "-a",
          "${REDIS_PASSWORD}",
          "ping",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    # Security: Don't expose Redis port to host in production
    # ports:
    #   - "6379:6379"
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
        reservations:
          cpus: "0.25"
          memory: 128M

  # Reverse proxy/Load balancer (nginx)
  nginx:
    image: nginx:alpine
    container_name: sermon-transcription-nginx
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro # SSL certificates
      - nginx_logs:/var/log/nginx
    networks:
      - sermon-transcription-network
    depends_on:
      - sermon-transcription-api
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "0.25"
          memory: 64M

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local
  sermon_logs:
    driver: local
  nginx_logs:
    driver: local

networks:
  sermon-transcription-network:
    driver: bridge
# Example secrets (use Docker secrets or external secret management in real production)
# secrets:
#   jwt_secret:
#     external: true
#   db_password:
#     external: true
#   redis_password:
#     external: true
